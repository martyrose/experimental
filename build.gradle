apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

//define the directory structure
project.ext.explodedWarDir = file("$buildDir/$name" + ".war")

repositories {
    mavenCentral()
}


configurations {
    sources {
        transitive = false
    }
}


//define our dependencies
dependencies {
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.commons:commons-math3:3.3'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.google.guava:guava:17.0'
    compile 'joda-time:joda-time:2.3'
//    compile 'org.cliffc:high-scale-lib:1.1.2'

    compile 'junit:junit:4.11'
    runtime 'postgresql:postgresql:9.1-901.jdbc4'

    //logback
    compile 'ch.qos.logback:logback-classic:1.0.13'

    //slf4J logging
    ['slf4j-api','jcl-over-slf4j','log4j-over-slf4j'].each {
        compile("org.slf4j:${it}:1.7.5")
    }
    //Groovy need by logback for configuration
    runtime 'org.codehaus.groovy:groovy-all:1.8.9@jar'

    // Tomcat 8 for embedded container
    compile 'org.apache.tomcat.embed:tomcat-embed-core:8.0.8'
    compile 'org.apache.tomcat.embed:tomcat-embed-logging-juli:8.0.8'

}

//basename for generated jar and war
archivesBaseName = 'mrose-beta'

//override the compiler options
sourceCompatibility = "1.7"
targetCompatibility = "1.7"
compileJava {
    options.depend()
    options.fork(memoryInitialSize: "256M", memoryMaximumSize: "512M")
    options.debug(debugLevel: "lines,vars,source")
}

def checkForRemoteDebug() {
    return project.hasProperty('remoteDebug') && remoteDebug != null && remoteDebug == "true"
}

def defineRuntimeConfig(name, runClass, function, consolePort, debugPort) {
    def config = new Expando()
    config.name = name
    config.runClass = runClass

    config.hotspotArgs = ['-server', '-XX:CompileThreshold=1000']
    config.maxHeapSize = '512m'
    config.memArgs = ['-Xms64m', '-XX:MaxPermSize=128m', '-XX:NewRatio=4']
    config.gcArgs = ['-XX:+ScavengeBeforeFullGC', '-XX:+UseConcMarkSweepGC', '-XX:+UseParNewGC', '-XX:CMSInitiatingOccupancyFraction=70']
    config.threadArgs = ['-XX:+UseThreadPriorities', '-XX:ThreadPriorityPolicy=666']
    10.times { priority ->
      config.threadArgs << "-XX:JavaPriority${priority + 1}_To_OSPriority=${9 - priority}"
    }
    config.debugArgs = ['-Xdebug', '-Xnoagent', '-Djava.compiler=NONE', "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$debugPort"]
    config.systemProperties = [:]
    config.systemProperties['java.awt.headless'] = true
    config.systemProperties['file.encoding'] = 'UTF-8'
    config.systemProperties['java.net.preferIPv4Stack'] = true
    config.systemProperties['net.sf.ehcache.skipUpdateCheck'] = true
    config.systemProperties['org.terracotta.quartz.skipUpdateCheck'] = true
    config.systemProperties['console.port'] = consolePort
    config.systemProperties['javax.jms.provider'] = 'activemq'
    config.systemProperties['activemq.base'] = '/tmp/activemq-engine'

    return config
}

def runtimeConfigs = [:]
runtimeConfigs.engine = defineRuntimeConfig('run', 'com.accertify.autodecision.lifecycle.AutoDecisionEngine', 'ga', 9999, 45555)

runtimeConfigs.values().each { config ->
    task("${config.name}", dependsOn: classes, type: JavaExec) {
        main = config.runClass
        classpath = sourceSets.main.runtimeClasspath
        maxHeapSize = config.maxHeapSize
        jvmArgs config.hotspotArgs + config.memArgs + config.gcArgs + config.threadArgs
        systemProperties config.systemProperties
        if (checkForRemoteDebug()) {
            jvmArgs config.debugArgs
        }
    }
}

