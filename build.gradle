apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

//define the directory structure
project.ext.explodedWarDir = file("$buildDir/$name" + ".war")

repositories {
    maven {
        credentials {
            username project.'artifactory.publish.username'
            password project.'artifactory.publish.password'
        }
        url project.'resolve.url'
    }
}


configurations {
    sources {
        transitive = false
    }
}


//define our dependencies
dependencies {
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.7'
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'org.apache.commons:commons-math3:3.1.1'
    compile 'com.google.code.gson:gson:2.2.2'
    compile 'com.google.guava:guava:14.0-rc1'
    compile 'joda-time:joda-time:2.1'
    compile 'org.cliffc:high-scale-lib:1.1.2'
    compile 'net.sf.jgap:jgap:3.6.2'

    testCompile 'junit:junit:4.10'
    runtime 'postgresql:postgresql:9.1-901.jdbc4'

    //logback
    compile 'ch.qos.logback:logback-classic:1.0.9'

    //slf4J logging
    ['slf4j-api','jcl-over-slf4j','log4j-over-slf4j'].each {
        compile("org.slf4j:${it}:1.7.2")
    }

    // Accertify core
    compile 'com.accertify.core:core:1.5.0.FINAL'
    // compile fileTree(dir: "../accertify_core/build/libs", includes: ['core.jar'])

    //For Message Queue support
    compile 'com.accertify.mq:mq-common:20130218'
    compile 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1'
    runtime('org.apache.activemq:activemq-core:5.8.0') {
        // We don't want these, as they have many transitive dependencies
        exclude module: 'fusemq-leveldb'
        exclude module: 'mqtt-client'
        // Avoid potential version conflicts with spring
        exclude group: 'org.springframework'
    }
    //XBeans needed for ActiveMQ XML configuration (which I'm not using)
    // runtime 'org.apache.xbean:xbean-spring:3.7'

    //Groovy need by logback for configuration
    runtime 'org.codehaus.groovy:groovy-all:1.8.8@jar'

    // Inherit all these from core

    //Netty used for the console
    runtime 'org.jboss.netty:netty:3.2.9.Final'

    //Ehcache
    runtime 'net.sf.ehcache:ehcache-core:2.4.1'

    //Quartz scheduling library
    runtime 'org.quartz-scheduler:quartz:1.8.6'

    // Commons pooling lib
    runtime 'commons-pool:commons-pool:1.6'

    //C3P0 JDBC Connection Pool
    runtime 'c3p0:c3p0:0.9.1.2'

    //Apache commons components
    runtime 'commons-beanutils:commons-beanutils-core:1.8.3'
    runtime 'commons-collections:commons-collections:3.2.1'
    runtime 'commons-configuration:commons-configuration:1.9'
    runtime 'commons-digester:commons-digester:1.8.1'
    runtime 'org.apache.commons:commons-email:1.3'
    runtime 'org.apache.httpcomponents:httpclient:4.2.3', 'org.apache.httpcomponents:httpcore:4.2.3', 'org.apache.httpcomponents:httpmime:4.2.3'
    runtime 'commons-lang:commons-lang:2.6'
    runtime 'commons-logging:commons-logging:1.1.1'
    runtime 'commons-math:commons-math:1.2'
}

//basename for generated jar and war
archivesBaseName = 'mrose-beta'

//override the compiler options
sourceCompatibility = "1.7"
targetCompatibility = "1.7"
compileJava {
    options.depend()
    options.fork(memoryInitialSize: "256M", memoryMaximumSize: "512M")
    options.debug(debugLevel: "lines,vars,source")
}

def checkForRemoteDebug() {
    return project.hasProperty('remoteDebug') && remoteDebug != null && remoteDebug == "true"
}

def defineRuntimeConfig(name, runClass, function, consolePort, debugPort) {
    def config = new Expando()
    config.name = name
    config.runClass = runClass

    config.hotspotArgs = ['-server', '-XX:CompileThreshold=1000']
    config.maxHeapSize = '512m'
    config.memArgs = ['-Xms64m', '-XX:MaxPermSize=128m', '-XX:NewRatio=4']
    config.gcArgs = ['-XX:+ScavengeBeforeFullGC', '-XX:+UseConcMarkSweepGC', '-XX:+UseParNewGC', '-XX:CMSInitiatingOccupancyFraction=70']
    config.threadArgs = ['-XX:+UseThreadPriorities', '-XX:ThreadPriorityPolicy=666']
    10.times { priority ->
      config.threadArgs << "-XX:JavaPriority${priority + 1}_To_OSPriority=${9 - priority}"
    }
    config.debugArgs = ['-Xdebug', '-Xnoagent', '-Djava.compiler=NONE', "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$debugPort"]
    config.systemProperties = [:]
    config.systemProperties['java.awt.headless'] = true
    config.systemProperties['file.encoding'] = 'UTF-8'
    config.systemProperties['java.net.preferIPv4Stack'] = true
    config.systemProperties['net.sf.ehcache.skipUpdateCheck'] = true
    config.systemProperties['org.terracotta.quartz.skipUpdateCheck'] = true
    config.systemProperties['console.port'] = consolePort
    config.systemProperties['javax.jms.provider'] = 'activemq'
    config.systemProperties['activemq.base'] = '/tmp/activemq-engine'

    return config
}

def runtimeConfigs = [:]
runtimeConfigs.engine = defineRuntimeConfig('run', 'com.accertify.autodecision.lifecycle.AutoDecisionEngine', 'ga', 9999, 45555)

runtimeConfigs.values().each { config ->
    task("${config.name}", dependsOn: classes, type: JavaExec) {
        main = config.runClass
        classpath = sourceSets.main.runtimeClasspath
        maxHeapSize = config.maxHeapSize
        jvmArgs config.hotspotArgs + config.memArgs + config.gcArgs + config.threadArgs
        systemProperties config.systemProperties
        if (checkForRemoteDebug()) {
            jvmArgs config.debugArgs
        }
    }
}

