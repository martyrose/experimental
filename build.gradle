apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

//define the directory structure
project.ext.explodedWarDir = file("$buildDir/$name" + ".war")

repositories {
    mavenCentral()
}

//define our dependencies
dependencies {
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.apache.commons:commons-math3:3.3'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.google.guava:guava:18.0'
    compile 'net.sf.opencsv:opencsv:2.3'
    compile 'com.google.code.findbugs:jsr305:2.0.3'
    compile 'joda-time:joda-time:2.5'
    compile 'org.mockito:mockito-core:1.10.8'
    compile 'com.boundary:high-scale-lib:1.0.6'

    compile 'junit:junit:4.11'
    runtime 'postgresql:postgresql:9.1-901.jdbc4'

    //slf4J logging
    ['slf4j-api'].each {
        compile("org.slf4j:${it}:1.7.7")
    }

    //slf4J logging
    ['jcl-over-slf4j','log4j-over-slf4j','slf4j-jdk14'].each {
        runtime("org.slf4j:${it}:1.7.7")
    }

    // Tomcat 8 for embedded container
    compile 'org.apache.tomcat.embed:tomcat-embed-core:8.0.14'
    compile 'org.apache.tomcat.embed:tomcat-embed-logging-juli:8.0.14'

    compile 'org.eclipse.jetty:jetty-server:9.2.3.v20140905'
    compile 'org.eclipse.jetty:jetty-servlet:9.2.3.v20140905'

    compile 'org.bitbucket.fwilhelm:org.jenetics:2.0.2'
}

//basename for generated jar and war
archivesBaseName = 'mrose-beta'

//override the compiler options
sourceCompatibility = "1.8"
targetCompatibility = "1.8"
compileJava {
    options.depend()
    options.fork(memoryInitialSize: "256M", memoryMaximumSize: "512M")
    options.debug(debugLevel: "lines,vars,source")
}

def checkForRemoteDebug() {
    return project.hasProperty('remoteDebug') && remoteDebug != null && remoteDebug == "true"
}

def defineRuntimeConfig(name, runClass, function, consolePort, debugPort) {
    def config = new Expando()
    config.name = name
    config.runClass = runClass

    config.hotspotArgs = ['-server']
    config.maxHeapSize = '512m'
    config.memArgs = ['-Xms64m']

    config.debugArgs = ['-Xdebug', '-Xnoagent', '-Djava.compiler=NONE', "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$debugPort"]
    config.systemProperties = [:]
    config.systemProperties['java.awt.headless'] = true
    config.systemProperties['file.encoding'] = 'UTF-8'
//    config.systemProperties['java.net.preferIPv4Stack'] = true

    return config
}

def runtimeConfigs = [:]
runtimeConfigs.engine = defineRuntimeConfig('run', 'com.mrose.embed.VelocityRun', 'ga', 9999, 45555)

runtimeConfigs.values().each { config ->
    task("${config.name}", dependsOn: classes, type: JavaExec) {
        main = config.runClass
        classpath = sourceSets.main.runtimeClasspath
        maxHeapSize = config.maxHeapSize
        jvmArgs config.hotspotArgs + config.memArgs
        systemProperties config.systemProperties
        if (checkForRemoteDebug()) {
            jvmArgs config.debugArgs
        }
    }
}

